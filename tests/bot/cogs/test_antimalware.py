import asyncio
import logging
import unittest
from os.path import splitext
from unittest.mock import AsyncMock, Mock

from discord import NotFound

from bot.cogs import antimalware
from bot.constants import AntiMalware as AntiMalwareConfig, Roles, URLs
from tests.helpers import MockAttachment, MockBot, MockMessage, MockRole

MODULE = "bot.cogs.antimalware"


class AntiMalwareCogTests(unittest.TestCase):
    """Test the AntiMalware cog."""

    def setUp(self):
        """Sets up fresh objects for each test."""
        self.bot = MockBot()
        self.cog = antimalware.AntiMalware(self.bot)
        self.message = MockMessage()
        self.message.delete = AsyncMock()

    def test_message_with_allowed_attachment(self):
        """Messages with allowed extensions should not be deleted"""
        attachment = MockAttachment(filename=f"python.{AntiMalwareConfig.whitelist[0]}")
        self.message.attachments = [attachment]

        coroutine = self.cog.on_message(self.message)
        asyncio.run(coroutine)
        self.message.delete.assert_not_called()

    def test_message_without_attachment(self):
        """Messages without attachments should result in no action."""
        coroutine = self.cog.on_message(self.message)
        self.assertIsNone(asyncio.run(coroutine))
        self.message.delete.assert_not_called()

    def test_direct_message_with_attachment(self):
        """Direct messages should have no action taken."""
        attachment = MockAttachment(filename="python.asdfsff")
        self.message.attachments = [attachment]
        self.message.guild = None

        coroutine = self.cog.on_message(self.message)
        asyncio.run(coroutine)

        self.message.delete.assert_not_called()

    def test_message_with_illegal_extension_gets_deleted(self):
        """A message containing an illegal extension should send an embed."""
        attachment = MockAttachment(filename="python.asdfsff")
        self.message.attachments = [attachment]

        coroutine = self.cog.on_message(self.message)
        asyncio.run(coroutine)

        self.message.delete.assert_called_once()

    def test_message_send_by_staff(self):
        """A message send by a member of staff should be ignored."""
        moderator_role = MockRole(name="Moderator", id=Roles.moderators)
        self.message.author.roles.append(moderator_role)
        attachment = MockAttachment(filename="python.asdfsff")
        self.message.attachments = [attachment]

        coroutine = self.cog.on_message(self.message)
        asyncio.run(coroutine)

        self.message.delete.assert_not_called()

    def test_python_file_redirect_embed(self):
        """A message containing a .python file should result in an embed redirecting the user to our paste site"""
        attachment = MockAttachment(filename="python.py")
        self.message.attachments = [attachment]
        self.message.channel.send = AsyncMock()

        coroutine = self.cog.on_message(self.message)
        asyncio.run(coroutine)
        args, kwargs = self.message.channel.send.call_args
        embed = kwargs.pop("embed")

        self.assertEqual(args[0], f"Hey {self.message.author.mention}!")
        self.assertEqual(embed.description, (
            "It looks like you tried to attach a Python file - "
            f"please use a code-pasting service such as {URLs.site_schema}{URLs.site_paste}"
        ))

    def test_removing_deleted_message_logs(self):
        """Removing an already deleted message logs the correct message"""
        attachment = MockAttachment(filename="python.asdfsff")
        self.message.attachments = [attachment]
        self.message.delete = AsyncMock(side_effect=NotFound(response=Mock(status=""), message=""))

        coroutine = self.cog.on_message(self.message)
        logger = logging.getLogger(MODULE)

        with self.assertLogs(logger=logger, level="INFO") as logs:
            asyncio.run(coroutine)
        self.assertIn(
            f"INFO:{MODULE}:Tried to delete message `{self.message.id}`, but message could not be found.",
            logs.output)

    def test_message_with_illegal_attachment_logs(self):
        """Deleting a message with an illegal attachment should result in a log."""
        attachment = MockAttachment(filename="python.asdfsff")
        self.message.attachments = [attachment]

        coroutine = self.cog.on_message(self.message)
        file_extensions = {splitext(attachment.filename.lower())[1] for attachment in self.message.attachments}
        extensions_blocked = file_extensions - set(AntiMalwareConfig.whitelist)
        blocked_extensions_str = ', '.join(extensions_blocked)
        logger = logging.getLogger(MODULE)

        with self.assertLogs(logger=logger, level="INFO") as logs:
            asyncio.run(coroutine)
        self.assertEqual(
            [
                f"INFO:{MODULE}:"
                f"User '{self.message.author}' ({self.message.author.id}) "
                f"uploaded blacklisted file(s): {blocked_extensions_str}"
            ],
            logs.output)


class AntiMalwareSetupTests(unittest.TestCase):
    """Tests setup of the `AntiMalware` cog."""

    def test_setup(self):
        """Setup of the extension should call add_cog."""
        bot = MockBot()
        antimalware.setup(bot)
        bot.add_cog.assert_called_once()
