import unittest
from unittest.mock import AsyncMock, Mock

from discord import NotFound

from bot.cogs import antimalware
from bot.constants import AntiMalware as AntiMalwareConfig, Channels, STAFF_ROLES, URLs
from tests.helpers import MockAttachment, MockBot, MockMessage, MockRole

MODULE = "bot.cogs.antimalware"


class AntiMalwareCogTests(unittest.IsolatedAsyncioTestCase):
    """Test the AntiMalware cog."""

    def setUp(self):
        """Sets up fresh objects for each test."""
        self.bot = MockBot()
        self.cog = antimalware.AntiMalware(self.bot)
        self.message = MockMessage()
        AntiMalwareConfig.whitelist = [".first", ".second", ".third"]

    async def test_message_with_allowed_attachment(self):
        """Messages with allowed extensions should not be deleted"""
        attachment = MockAttachment(filename=f"python{AntiMalwareConfig.whitelist[0]}")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)
        self.message.delete.assert_not_called()

    async def test_message_without_attachment(self):
        """Messages without attachments should result in no action."""
        await self.cog.on_message(self.message)
        self.message.delete.assert_not_called()

    async def test_direct_message_with_attachment(self):
        """Direct messages should have no action taken."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]
        self.message.guild = None

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_message_with_illegal_extension_gets_deleted(self):
        """A message containing an illegal extension should send an embed."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_called_once()

    async def test_message_send_by_staff(self):
        """A message send by a member of staff should be ignored."""
        staff_role = MockRole(id=STAFF_ROLES[0])
        self.message.author.roles.append(staff_role)
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        await self.cog.on_message(self.message)

        self.message.delete.assert_not_called()

    async def test_python_file_redirect_embed(self):
        """A message containing a .py file should result in an embed redirecting the user to our paste site"""
        attachment = MockAttachment(filename="python.py")
        self.message.attachments = [attachment]
        self.message.channel.send = AsyncMock()

        await self.cog.on_message(self.message)
        self.message.channel.send.assert_called_once()
        args, kwargs = self.message.channel.send.call_args
        embed = kwargs.pop("embed")

        self.assertEqual(args[0], f"Hey {self.message.author.mention}!")
        self.assertEqual(embed.description, (
            "It looks like you tried to attach a Python file - "
            f"please use a code-pasting service such as {URLs.site_schema}{URLs.site_paste}"
        ))

    async def test_txt_file_redirect_embed(self):
        attachment = MockAttachment(filename="python.txt")
        self.message.attachments = [attachment]
        self.message.channel.send = AsyncMock()

        await self.cog.on_message(self.message)
        args, kwargs = self.message.channel.send.call_args
        embed = kwargs.pop("embed")
        cmd_channel = self.bot.get_channel(Channels.bot_commands)

        self.assertEqual(args[0], f"Hey {self.message.author.mention}!")
        self.assertEqual(embed.description, (
            "**Uh-oh!** It looks like your message got zapped by our spam filter. "
            "We currently don't allow `.txt` attachments, so here are some tips to help you travel safely: \n\n"
            "• If you attempted to send a message longer than 2000 characters, try shortening your message "
            "to fit within the character limit or use a pasting service (see below) \n\n"
            "• If you tried to show someone your code, you can use codeblocks \n(run `!code-blocks` in "
            f"{cmd_channel.mention} for more information) or use a pasting service like: "
            f"\n\n{URLs.site_schema}{URLs.site_paste}"
        ))

    async def test_removing_deleted_message_logs(self):
        """Removing an already deleted message logs the correct message"""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]
        self.message.delete = AsyncMock(side_effect=NotFound(response=Mock(status=""), message=""))

        with self.assertLogs(logger=antimalware.log, level="INFO"):
            await self.cog.on_message(self.message)
        self.message.delete.assert_called_once()

    async def test_message_with_illegal_attachment_logs(self):
        """Deleting a message with an illegal attachment should result in a log."""
        attachment = MockAttachment(filename="python.disallowed")
        self.message.attachments = [attachment]

        with self.assertLogs(logger=antimalware.log, level="INFO"):
            await self.cog.on_message(self.message)

    async def test_get_disallowed_extensions(self):
        """The return value should include all non-whitelisted extensions."""
        test_values = (
            ([], []),
            (AntiMalwareConfig.whitelist, []),
            ([".first"], []),
            ([".first", ".disallowed"], [".disallowed"]),
            ([".disallowed"], [".disallowed"]),
            ([".disallowed", ".illegal"], [".disallowed", ".illegal"]),
        )

        for extensions, expected_disallowed_extensions in test_values:
            with self.subTest(extensions=extensions, expected_disallowed_extensions=expected_disallowed_extensions):
                self.message.attachments = [MockAttachment(filename=f"filename{extension}") for extension in extensions]
                disallowed_extensions = self.cog.get_disallowed_extensions(self.message)
                self.assertCountEqual(disallowed_extensions, expected_disallowed_extensions)


class AntiMalwareSetupTests(unittest.TestCase):
    """Tests setup of the `AntiMalware` cog."""

    def test_setup(self):
        """Setup of the extension should call add_cog."""
        bot = MockBot()
        antimalware.setup(bot)
        bot.add_cog.assert_called_once()
